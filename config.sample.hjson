//
//                  _ _
//  _   _ _ __   __| (_)___  ___ ___
// | | | | '_ \ / _` | / __|/ __/ _ \
// | |_| | | | | (_| | \__ \ (_| (_) |
//  \__,_|_| |_|\__,_|_|___/\___\___/

{
  // this is the folder that undiscombobulate is going to watch.
  // it's best to have your download client move completed downloads to a
  // `complete` folder, and have undisco monitor that folder.
  
  // linux example:
  downloadsPath: /srv/downloads/complete
  
  // windows example
  // downloadsPath: C:\home\faux\downloads\complete

  // how deep to monitor downloads dir. If you have a structure like:
  // downloadsPath/tv and downloadsPath/movies in your completes folder, then
  // you'd want downloadsDepth: 1. If your completes folder doesn't have
  // subfolders like that, then you'd just use downloadsDepth: 0
  downloadsDepth: 1


  // if `once: true`, undisco will run once, no polling or monitoring
  once: false

  // if `watch: true`, undisco will monitor your fs and react immediately
  // to changes. There's a bunch of problems with watching file systems
  // generally, like if you're using a network share, or docker, then
  // this probably won't work
  watch: true

  // as a fallback to 'watch' you can poll the directory every few minutes,
  // but this won't let your HDD sleep.
  poll: 5 // minutes

  // module options go here
  // see defaults in module source for all available options
  // options are only merged with defaults in the source to the first level
  destPaths: {

    // archives are used in the 'archive' placeholder, see `tv` or `movie`
    archives: {
      tv: 'tv',
      movie: 'movies'
    },

    // see `placeholders` module for all available placeholders, briefly:
    // S       : Season, non-zero padded
    // SS      : Season, zero padded
    // E       : Episode, non-zero padded
    // EE      : Episode, zero padded
    // archive : as above
    // title   : movie or tv show title
    // year    : release year (movies only)
    // ext     : original file extension
    tv: {
      path: '{archive}/{title}/Season {S}/',
      nfo: '{base}',
      feature: '{title} S{SS}E{EE}{ext}',
      sample: '{title} S{SS}E{EE}-sample{ext}',
      subtitles: '{title} S{SS}E{EE}{ext}'
    },

    movie: {
      path: '{archive}/{title} ({year})',
      feature: '{title} ({year}){ext}',
      sample: '{title} (sample){ext}',
      subtitles: '{title} ({year}){ext}'
    }
  }

  skip: {
    // how long to wait before retrying the same release
    retryAfter: 6 // hours
    ignoreDump: false
  }

  tmdb: {
    // your tmdb api key
    // create account at themoviedb.org
    // looks like this:
    apiKey: a299363d2671f228fbedda6d180755fb
  }
}
